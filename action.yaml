name: "Pixi-Pack Action"
description: "Uses pixi-pack to create packed environments and installers"
author: "Wytamma"
branding:
  icon: 'upload'
  color: 'green'

inputs:
  environment:
    description: "Environment to pack"
    required: false
    default: 'default'
  platform:
    description: "Target platform for the environment (e.g., linux-64, osx-64, win-64)"
    required: false
  recipe:
    description: "Path to recipe to build and inject into environment"
    required: false
  pixi-pack-version:
    description: "Version of pixi-pack to use"
    required: false
    default: '0.3.3'
  rattler-build-version:
    description: "Version of rattler-build to use"
    required: false
    default: '0.39.0'

runs:
  using: "composite"
  steps:
    # 1) Install Pixi (using prefix-dev/setup-pixi)
    - name: Install Pixi
      uses: prefix-dev/setup-pixi@v0.8.3
      with:
        runInstall: false

    # 2) Install pixi-pack & rattler-build globally via pixi
    - name: Install pixi-pack & rattler-build
      run: pixi global install pixi-pack==${{ inputs.pixi-pack-version }} rattler-build==${{ inputs.rattler-build-version }}
      shell: bash

    # 3) Conditionally build recipe
    - name: Build package recipe
      if: ${{ inputs.recipe != '' }}
      run: rattler-build build -r ${{ inputs.recipe }}
      shell: bash

    # 4) Run pixi-pack with optional --inject
    - name: Run pixi-pack
      run: |
        echo "==> Packing environment for platform: ${{ inputs.platform }}"

        PACK_CMD="pixi-pack pack  --environment '${{ inputs.environment }}' --create-executable "

        if [ -n "${{ inputs.platform }}" ]; then
          echo "Adding --platform flag: ${{ inputs.platform }}"
          PACK_CMD="$PACK_CMD --platform '${{ inputs.platform }}'"
        fi

        if [ -n "${{ inputs.recipe }}" ]; then
          echo "Adding --inject flag based on recipe presence"
          PACK_CMD="$PACK_CMD --inject output/noarch/*.conda"
        fi

        echo "Running: $PACK_CMD"
        eval "$PACK_CMD"
      shell: bash

    # 5) Rename the output file
    - name: Rename output file
      run: |
        OUTPUT_FILE=$(ls -1 | grep -E 'environment\.(sh|ps1)' | head -n 1)
        if [ -z "$OUTPUT_FILE" ]; then
          echo "No output file found matching pattern"
          exit 1
        fi
        echo "Found output file: $OUTPUT_FILE"
        filename=$(basename -- "$OUTPUT_FILE")
        extension="${filename##*.}"
        NEW_NAME="${{ github.event.repository.name }}-${{ github.ref_name }}-${{ inputs.platform }}.${extension}"
        mv "$OUTPUT_FILE" "$NEW_NAME"
      shell: bash